#!/usr/bin/env python3

import os
import sys
import argparse
from urllib.error import URLError
from urllib.request import urlretrieve, urlopen
import json

from functions import *


# parse arguments from the cli.
def process_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--local-path', dest="local_path",
                        help="Local path for kernel files to use instead of downloading from github.")
    parser.add_argument("--stable", action="store_true", dest="stable", default=False,
                        help="Use latest stable kernel.")
    parser.add_argument("--dev", action="store_true", dest="dev_release", default=False,
                        help="Use kernels from latest dev build. May be unstable.")
    parser.add_argument("--alt", action="store_true", dest="alt", default=False,
                        help="Use alt kernel. Recommended for older devices.")
    parser.add_argument("--exp", action="store_true", dest="exp", default=False,
                        help="Use experimental 5.15 chromeos kernel. It is newer, but Google does not use "
                             "it in production yet.")
    parser.add_argument("--mainline", action="store_true", dest="mainline", default=False,
                        help="Use mainline linux kernel instead of modified chromeos kernel. Might provide more "
                             "functionality on newer devices.")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=False, help="Print more output")
    return parser.parse_args()


# Clean old depthboot files from /tmp
def prepare_host() -> None:
    print_status("Preparing host system")

    print_status("Cleaning + preparing host system")
    rmdir("/tmp/depthboot-external")
    mkdir("/tmp/depthboot-external", create_parents=True)

    print_status("Creating mount points and preparing device")
    try:
        bash("umount -lf /mnt/depthboot-external 2>/dev/null")  # just in case
    except subprocess.CalledProcessError:
        print("Failed to unmount /mnt/depthboot-external, ignore")
        pass
    rmdir("/mnt/depthboot-external")
    mkdir("/mnt/depthboot-external", create_parents=True)

    # remount USB/SD-card
    bash(f"umount {device}1")
    bash(f"umount {device}2")
    bash(f"mount {device}2 /mnt/depthboot-external")


# download kernel files from GitHub
def download_kernel() -> None:
    # select correct link
    if args.dev_release:
        url = "https://github.com/eupnea-linux/kernel/releases/download/dev-build/"
    else:
        url = "https://github.com/eupnea-linux/kernel/releases/latest/download/"

    # download kernel files
    start_progress()  # show fake progress
    try:
        match kernel_type:
            case "mainline":
                print_status("Downloading mainline kernel")
                url = "https://github.com/eupnea-linux/mainline-kernel/releases/latest/download/"
                urlretrieve(f"{url}bzImage-stable", filename="/tmp/depthboot-external/bzImage")
                urlretrieve(f"{url}modules-stable.tar.xz", filename="/tmp/depthboot-external/modules.tar.xz")
                urlretrieve(f"{url}headers-stable.tar.xz", filename="/tmp/depthboot-external/headers.tar.xz")
            case "alt":
                print_status("Downloading alt kernel")
                urlretrieve(f"{url}bzImage-alt", filename="/tmp/depthboot-external/bzImage")
                urlretrieve(f"{url}modules-alt.tar.xz", filename="/tmp/depthboot-external/modules.tar.xz")
                urlretrieve(f"{url}headers-alt.tar.xz", filename="/tmp/depthboot-external/headers.tar.xz")
            case "exp":
                print_status("Downloading experimental 5.15 kernel")
                urlretrieve(f"{url}bzImage-exp", filename="/tmp/depthboot-external/bzImage")
                urlretrieve(f"{url}modules-exp.tar.xz", filename="/tmp/depthboot-external/modules.tar.xz")
                urlretrieve(f"{url}headers-exp.tar.xz", filename="/tmp/depthboot-external/headers.tar.xz")
            case "stable":
                print_status("Downloading stable 5.10 kernel")
                urlretrieve(f"{url}bzImage", filename="/tmp/depthboot-external/bzImage")
                urlretrieve(f"{url}modules.tar.xz", filename="/tmp/depthboot-external/modules.tar.xz")
                urlretrieve(f"{url}headers.tar.xz", filename="/tmp/depthboot-external/headers.tar.xz")
    except URLError:
        print_error("Failed to reach github. Check your internet connection and try again or use local files with -l")
        exit(1)

    stop_progress()  # stop fake progress
    print_status("Kernel files downloaded successfully")


# Configure distro agnostic options
def flash_kernel() -> None:
    print_status("Flashing new kernel")

    # Extract modules
    print_status("Extracting kernel modules")
    rmdir("/mnt/depthboot-external/lib/modules")  # remove all old modules
    mkdir("/mnt/depthboot-external/lib/modules")
    bash(f"tar xpf /tmp/depthboot-external/modules.tar.xz -C /mnt/depthboot-external/lib/modules/ --checkpoint=.10000")
    print("")  # break line after tar

    # Extract kernel headers
    print_status("Extracting kernel headers")
    dir_kernel_version = bash(f"ls /mnt/depthboot-external/lib/modules/").strip()  # get modules dir name
    rmdir(f"/mnt/depthboot-external/usr/src/linux-headers-{dir_kernel_version}", keep_dir=False)  # remove old headers
    mkdir(f"/mnt/depthboot-external/usr/src/linux-headers-{dir_kernel_version}", create_parents=True)
    bash(f"tar xpf /tmp/depthboot-external/headers.tar.xz -C /mnt/depthboot-external/usr/src/linux-headers-"
         f"{dir_kernel_version}/ --checkpoint=.10000")
    print("")  # break line after tar
    chroot(f"ln -s /usr/src/linux-headers-{dir_kernel_version}/ "
           f"/lib/modules/{dir_kernel_version}/build")  # use chroot for correct symlink

    # Using hardcoded command line
    rootfs_partuuid = bash(f"blkid -o value -s PARTUUID {device}2")  # get uuid of rootfs partition
    temp_cmdline = "console=tty1 root=PARTUUID=${USB_ROOTFS} i915.modeset=1 rootwait rw fbcon=logo-pos:center" \
                   ",logo-count:1 loglevel=0 splash"
    new_cmdline = temp_cmdline.replace("${USB_ROOTFS}", rootfs_partuuid)  # add partuuid of rootfs
    with open("kernel.flags", "w") as file:
        file.write(new_cmdline)

    print_status("Signing kernel")
    bash("futility vbutil_kernel --arch x86_64 --version 1 --keyblock /usr/share/vboot/devkeys/kernel.keyblock"
         + " --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --bootloader kernel.flags" +
         " --config kernel.flags --vmlinuz /tmp/depthboot-external/bzImage --pack /tmp/depthboot-external/bzImage.signed")

    print_status("Flashing kernel")
    bash(f"dd if=/tmp/depthboot-external/bzImage.signed of={device}1")

    # update kernel type in depthboot settings
    with open("/mnt/depthboot-external/etc/eupnea.json", "w") as settings_file:
        settings = json.load(settings_file)
    settings["kernel_type"] = kernel_type
    with open("/mnt/depthboot-external/etc/eupnea.json", "w") as settings_file:
        json.dump(settings, settings_file)


# chroot command
def chroot(command: str) -> str:
    return bash(f'chroot /mnt/depthboot-external /bin/sh -c "{command}"')


if __name__ == "__main__":
    if os.geteuid() == 0 and not path_exists("/tmp/.root_ok"):
        print_error("Please start the script as non-root/without sudo")
        exit(1)

    args = process_args()  # process args before elevating to root for better ux

    # install kernel packages before elevating to root, as makepkg needs to be run as non-root
    install_kernel_packages()

    # Restart script as root
    if not os.geteuid() == 0:
        # create empty file to confirm script was started as non-root
        with open("/tmp/.root_ok", "w") as file:
            file.write("")
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    # delete file to confirm script was started as root
    rmfile("/tmp/.root_ok")

    if args.stable:
        print_warning("Using stable kernel")
        kernel_type = "stable"
    if args.dev_release:
        print_warning("Using dev release")
    if args.alt:
        print_warning("Using alt kernel")
        kernel_type = "alt"
    if args.exp:
        print_warning("Using experimental kernel")
        kernel_type = "exp"
    if args.mainline:
        print_warning("Using mainline kernel")
        kernel_type = "mainline"
    if args.local_path:
        print_warning("Using local path")
    set_verbose(args.verbose)  # set verbose in functions.py

    # ask user for device name
    while True:
        usb_array = []
        lsblk_out = bash("lsblk -o NAME,MODEL,SIZE,TRAN").splitlines()
        for line in lsblk_out[2:]:
            # MassStorageClass is not a real device, so ignore it
            if not line.find("usb") == -1 and line.find("MassStorageClass") == -1:  # Print USB devices only
                usb_array.append(line[:3])
                print(line[:-3])  # this is for the user to see the list
        if len(usb_array) == 0:
            input("No available USBs/SD-cards found. Please plug in a USB/SD-card and press enter")
            continue
        else:
            device = input("\033[92m" + 'Enter USB-drive/SD-card name(example: sdb)' + "\033[0m" + "\n").strip()
            if device in usb_array:
                if device.endswith("/") or device.endswith("1") or device.endswith("2"):
                    device = device[:-1]
                # add /dev/ to device name, if needed
                if not device.startswith("/dev/"):
                    device = f"/dev/{device}"
                print_status(f"Updating {device}")
                break
            else:
                print_warning("USB not found. Check your spelling and try again")
                continue

    # If user hasn't passed a kernel type cli option
    if not (args.stable or args.alt or args.exp or args.mainline):
        while True:
            print_question("Which kernel would you like to flash? Press enter for default\n")
            user_input = input(
                "\033[94m" + "Available options: stable(default), alt(for older devices), mainline(might work better on"
                             " newer devices, exp(experimental 5.15 kernel)" + "\033[0m" + "\n")
            match user_input:
                case "" | "stable" | "Stable" | "Default" | "default":
                    kernel_type = "stable"
                    break
                case "alt" | "Alt":
                    kernel_type = "alt"
                    break
                case "mainline" | "Mainline":
                    kernel_type = "mainline"
                    break
                case "exp" | "Experimental" | "experimental" | "Exp":
                    kernel_type = "exp"
                    break
                case _:
                    print_warning("Invalid kernel type, check your spelling")
                    continue

    prepare_host()
    if args.local_path is None:  # Download files from GitHub
        download_kernel()
    else:  # if local path is specified, copy files from it, instead of downloading from the internet
        # clean local path string
        if not args.local_path.endswith("/"):
            kernel_path = f"{args.local_path}/"
        else:
            kernel_path = args.local_path
        print_status("Copying local files to /tmp/depthboot-external")
        cpfile(f"{kernel_path}bzImage", "/tmp/depthboot-external/bzImage")
        cpfile(f"{kernel_path}modules.tar.xz", "/tmp/depthboot-external/modules.tar.xz")
        cpfile(f"{kernel_path}headers.tar.xz", "/tmp/depthboot-external/headers.tar.xz")

    flash_kernel()
    print_header("Kernel update complete! ")
    print_header("It is safe to remove the USB-drive/SD-card now.")
